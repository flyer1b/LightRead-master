/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SyncReadPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  email: "",
  password: "",
  token: "",
  time: "2020-01-01 00:00:00",
  apiKey: ""
};
var isWriting = false;
var SyncReadPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("sync", "SyncRead", (evt) => {
      writeAllArticles(this.app, this);
    });
    this.addSettingTab(new SyncReadSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SyncReadSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u7528\u6237\u540D").setDesc("\u8F93\u5165\u4F60\u5728SyncRead\u6CE8\u518C\u7684\u90AE\u7BB1").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165\u90AE\u7BB1").setValue(this.plugin.settings.email).onChange(async (value) => {
      this.plugin.settings.email = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5BC6\u7801").setDesc("").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165\u5BC6\u7801").setValue(this.plugin.settings.password).onChange(async (value) => {
      this.plugin.settings.password = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).addButton((button) => {
      button.setButtonText("\u767B\u5F55").onClick(async () => {
        button.disabled = true;
        button.setButtonText("\u767B\u5F55\u4E2D...");
        const { email, password } = this.plugin.settings;
        try {
          const res = await (0, import_obsidian.requestUrl)({
            url: "http://43.138.149.38:5050/login/",
            method: "POST",
            contentType: "application/json",
            body: JSON.stringify({
              "username": email,
              "password": password
            })
          });
          if (res.status !== 200) {
            new import_obsidian.Notice("\u767B\u5F55\u5931\u8D25");
            button.disabled = false;
            button.setButtonText("\u767B\u5F55");
            return;
          }
          const data = await res.json;
          this.plugin.settings.token = data.data.token;
          await this.plugin.saveSettings();
          new import_obsidian.Notice("\u767B\u5F55\u6210\u529F");
          button.setButtonText("\u767B\u5F55\u6210\u529F");
          button.disabled = false;
        } catch (error) {
          new import_obsidian.Notice("\u767B\u5F55\u5931\u8D25: " + error.message);
          button.disabled = false;
          button.setButtonText("\u767B\u5F55");
          return;
        }
      });
    });
    new import_obsidian.Setting(containerEl).setName("api key(\u53EF\u9009)").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165api key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
  }
};
async function fetchArticle(settings, time, page) {
  try {
    const apiKey = settings.apiKey;
    let res;
    if (apiKey === "") {
      res = await (0, import_obsidian.requestUrl)(
        {
          url: `http://43.138.149.38:5050/get_synced_articles?time=${time}&page_number=${page}&page_size=50`,
          method: "GET",
          headers: {
            "Authorization": "Bearer " + settings.token
          }
        }
      );
    } else {
      res = await (0, import_obsidian.requestUrl)(
        {
          url: `http://43.138.149.38:5050/get_synced_articles_by_key?time=${time}&page_number=${page}&page_size=50`,
          method: "GET",
          headers: {
            "api_key": apiKey
          }
        }
      );
    }
    if (res.status !== 200) {
      new import_obsidian.Notice("\u540C\u6B65\u5931\u8D25");
      isWriting = false;
      return;
    }
    const data = await res.json;
    return data.data;
  } catch (error) {
    new import_obsidian.Notice("\u540C\u6B65\u5931\u8D25: " + error.message);
    isWriting = false;
    return;
  }
}
async function writeArticle(vault, fileManager, article) {
  var folder = vault.getAbstractFileByPath("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  if (!folder)
    folder = await vault.createFolder("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  new import_obsidian.Notice("url: " + article.site);
  let file = await vault.create(folder.path + "/" + filterIllegalChars((0, import_obsidian.normalizePath)(article.title)) + ".md", article.content);
  return fileManager.processFrontMatter(file, (frontMatter) => {
    frontMatter["created_at"] = new Date().toISOString();
    frontMatter["url"] = article.site;
  });
}
async function writeAllArticles(app, plugin) {
  let vault = app.vault;
  let fileManager = app.fileManager;
  new import_obsidian.Notice(isWriting ? "\u6B63\u5728\u540C\u6B65" : "\u5F00\u59CB\u540C\u6B65");
  if (isWriting)
    return;
  isWriting = true;
  var time = plugin.settings.time;
  var page = 1;
  do {
    const articles = await fetchArticle(plugin.settings, time, page);
    if (articles.length === 0) {
      isWriting = false;
      new import_obsidian.Notice("\u540C\u6B65\u5B8C\u6210");
      break;
    }
    try {
      await Promise.all(articles.map((article) => writeArticle(vault, fileManager, article)));
    } catch (error) {
    }
    plugin.settings.time = articles[articles.length - 1].created_at;
    plugin.saveSettings();
    page++;
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  } while (true);
}
function filterIllegalChars(title) {
  const illegalChars = /[\\/:*?"<>|]/g;
  const filteredTitle = title.replace(illegalChars, "");
  return filteredTitle;
}
//# sourceMappingURL=data:application/json;base64,
