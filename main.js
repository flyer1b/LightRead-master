/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SyncReadPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  email: "",
  password: "",
  token: "",
  time: "2020-01-01 00:00:00",
  noteTime: "2024-03-09T10:37:49",
  apiKey: ""
};
var isWriting = false;
var SyncReadPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("sync", "SyncRead", async (evt) => {
      await writeAllArticles(this.app, this);
      writeAllNote(this.app, this);
    });
    this.addSettingTab(new SyncReadSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SyncReadSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("api key").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165api key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
  }
};
async function fetchArticle(settings, time, page) {
  try {
    const apiKey = settings.apiKey;
    let res;
    if (apiKey === "") {
      new import_obsidian.Notice("\u8BF7\u586B\u5199api key");
    } else {
      res = await (0, import_obsidian.requestUrl)(
        {
          url: `http://43.138.149.38:5050/get_synced_articles_by_key?time=${time}&page_number=${page}&page_size=50`,
          method: "GET",
          headers: {
            "api_key": apiKey
          }
        }
      );
      if (res.status !== 200) {
        new import_obsidian.Notice("\u540C\u6B65\u6587\u7AE0\u5931\u8D25");
        isWriting = false;
        return;
      }
      const data = await res.json;
      return data.data;
    }
  } catch (error) {
    new import_obsidian.Notice("\u540C\u6B65\u5931\u8D25: " + error.message);
    isWriting = false;
    return;
  }
}
async function fetchNote(settings, time, page) {
  try {
    const apiKey = settings.apiKey;
    let res;
    if (apiKey === "") {
      new import_obsidian.Notice("\u8BF7\u586B\u5199api key");
    } else {
      res = await (0, import_obsidian.requestUrl)(
        {
          url: `http://43.138.149.38:5050/get_notes_by_key?time=${time}&page_number=${page}&page_size=50`,
          method: "GET",
          headers: {
            "api_key": apiKey
          }
        }
      );
      if (res.status !== 200) {
        new import_obsidian.Notice("\u540C\u6B65\u6807\u6CE8\u5931\u8D25");
        isWriting = false;
        return;
      }
      const data = await res.json;
      return data.data;
    }
  } catch (error) {
    new import_obsidian.Notice("\u540C\u6B65\u5931\u8D25: " + error.message);
    isWriting = false;
    return;
  }
}
async function writeArticle(vault, fileManager, article) {
  var folder = vault.getAbstractFileByPath("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  if (!folder)
    folder = await vault.createFolder("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  let file = await vault.create(folder.path + "/" + filterIllegalChars((0, import_obsidian.normalizePath)(article.title)) + ".md", article.content);
  return fileManager.processFrontMatter(file, (frontMatter) => {
    frontMatter["created_at"] = new Date().toISOString();
    frontMatter["url"] = article.site;
  });
}
async function writeNote(vault, fileManager, note) {
  var folder = vault.getAbstractFileByPath("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  if (!folder)
    folder = await vault.createFolder("SyncRead\u540C\u6B65\u6587\u4EF6\u5939");
  var noteFolder = vault.getAbstractFileByPath(folder.path + "/\u6807\u6CE8");
  if (!noteFolder)
    noteFolder = await vault.createFolder(folder.path + "/\u6807\u6CE8");
  let noteFile = vault.getAbstractFileByPath(noteFolder.path + "/[\u6807\u6CE8]" + filterIllegalChars((0, import_obsidian.normalizePath)(note.articleTitle)) + ".md");
  if (!noteFile) {
    noteFile = await vault.create(noteFolder.path + "/[\u6807\u6CE8]" + filterIllegalChars((0, import_obsidian.normalizePath)(note.articleTitle)) + ".md", "\n");
    fileManager.processFrontMatter(noteFile, (frontMatter) => {
      frontMatter["originArticle"] = `[[${filterIllegalChars((0, import_obsidian.normalizePath)(note.articleTitle))}]]`;
    });
  }
  let noteText = note.text.replace(/\n+$/, "");
  let noteTextWithQuotes = "\n\n\n>" + noteText.replace(/\n/g, "\n>");
  return vault.append(noteFile, noteTextWithQuotes + "\n\n" + (note.annotation !== null ? note.annotation : ""));
}
async function writeAllNote(app, plugin) {
  let vault = app.vault;
  let fileManager = app.fileManager;
  if (isWriting)
    return;
  isWriting = true;
  var time = plugin.settings.noteTime;
  var page = 1;
  do {
    const notes = await fetchNote(plugin.settings, time, page);
    if (notes.length === 0) {
      isWriting = false;
      new import_obsidian.Notice("\u540C\u6B65\u6807\u6CE8\u5B8C\u6210");
      break;
    }
    try {
      await Promise.all(notes.map((note) => writeNote(vault, fileManager, note)));
    } catch (error) {
    }
    plugin.settings.noteTime = notes[notes.length - 1].update_at;
    plugin.saveSettings();
    page++;
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  } while (true);
}
async function writeAllArticles(app, plugin) {
  let vault = app.vault;
  let fileManager = app.fileManager;
  new import_obsidian.Notice(isWriting ? "\u6B63\u5728\u540C\u6B65" : "\u5F00\u59CB\u540C\u6B65");
  if (isWriting)
    return;
  isWriting = true;
  var time = plugin.settings.time;
  var page = 1;
  do {
    const articles = await fetchArticle(plugin.settings, time, page);
    if (articles.length === 0) {
      isWriting = false;
      new import_obsidian.Notice("\u540C\u6B65\u6587\u7AE0\u5B8C\u6210");
      break;
    }
    try {
      await Promise.all(articles.map((article) => writeArticle(vault, fileManager, article)));
    } catch (error) {
    }
    plugin.settings.time = articles[articles.length - 1].created_at;
    plugin.saveSettings();
    page++;
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  } while (true);
}
function filterIllegalChars(title) {
  const illegalChars = /[\\/:*?"<>|]/g;
  const filteredTitle = title.replace(illegalChars, "");
  return filteredTitle;
}
//# sourceMappingURL=data:application/json;base64,
